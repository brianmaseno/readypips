"use client";

import { useEffect, useState } from 'react';
import { useAuth } from '@/components/auth-context';
import { useRouter } from 'next/navigation';
import { Navigation } from '@/components/navigation';
import LightweightSignalChart from '@/components/lightweight-signal-chart';
import SignalNotifications from '@/components/signal-notifications';
import { Search, TrendingUp, TrendingDown } from 'lucide-react';

// All major forex pairs with their symbols
const FOREX_PAIRS = [
  { symbol: 'EURUSD', name: 'EUR/USD', binance: 'EURUSDT' },
  { symbol: 'GBPUSD', name: 'GBP/USD', binance: 'GBPUSDT' },
  // Fetch market data for selected pair
  useEffect(() => {
    const fetchMarketData = async () => {
      const pair = FOREX_PAIRS.find(p => p.symbol === selectedPair);
      if (!pair) return;

      try {
        const response = await fetch(`https://api.binance.com/api/v3/ticker/24hr?symbol=${pair.binance}`);
        const data = await response.json();
        
        setMarketData({
          price: parseFloat(data.lastPrice),
          change: parseFloat(data.priceChange),
          changePercent: parseFloat(data.priceChangePercent),
          high: parseFloat(data.highPrice),
          low: parseFloat(data.lowPrice),
          volume: parseFloat(data.volume),
        });
      } catch (error) {
        console.error('Error fetching market data:', error);
      }
    };

    fetchMarketData();
    const interval = setInterval(fetchMarketData, 1000);
    return () => clearInterval(interval);
  }, [selectedPair]);

  // Fetch watchlist data
  useEffect(() => {
    const fetchWatchlist = async () => {
      const topPairs = FOREX_PAIRS.slice(0, 8);
      const data: Record<string, MarketData> = {};

      try {
        await Promise.all(topPairs.map(async (pair) => {
          const response = await fetch(`https://api.binance.com/api/v3/ticker/24hr?symbol=${pair.binance}`);
          const ticker = await response.json();
          
          data[pair.symbol] = {
            price: parseFloat(ticker.lastPrice),
            change: parseFloat(ticker.priceChange),
            changePercent: parseFloat(ticker.priceChangePercent),
            high: parseFloat(ticker.highPrice),
            low: parseFloat(ticker.lowPrice),
            volume: parseFloat(ticker.volume),
          };
        }));

        setWatchlistData(data);
      } catch (error) {
        console.error('Error fetching watchlist:', error);
      }
    };

    fetchWatchlist();
    const interval = setInterval(fetchWatchlist, 5000);
    return () => clearInterval(interval);
  }, []);

  useEffect(() => {
    // Check if user has access to charts
    if (!user) {
      router.push('/login');
      return;
    }

  return (
    <div className="min-h-screen bg-black">
      {/* Navigation */}
      <Navigation />
      
      {/* Main Layout */}
      <div className="flex h-[calc(100vh-64px)]">
        {/* Watchlist Sidebar */}
        <div className="w-80 bg-gray-900 border-r border-gray-800 overflow-y-auto">
          <div className="p-4 border-b border-gray-800">
            <h2 className="text-white font-bold mb-3">Watchlist</h2>
            <div className="relative">
              <Search className="absolute left-3 top-2.5 h-4 w-4 text-gray-500" />
              <input
                type="text"
                placeholder="Search symbols..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="w-full pl-10 pr-4 py-2 bg-gray-800 text-white rounded-lg border border-gray-700 focus:border-blue-500 focus:outline-none"
              />
            </div>
          </div>

          <div className="divide-y divide-gray-800">
            {filteredPairs.map((pair) => {
              const data = watchlistData[pair.symbol];
              const isPositive = data ? data.changePercent >= 0 : true;
              
              return (
                <div
                  key={pair.symbol}
                  onClick={() => setSelectedPair(pair.symbol)}
                  className={`p-4 cursor-pointer hover:bg-gray-800 transition ${
                    selectedPair === pair.symbol ? 'bg-gray-800 border-l-2 border-blue-500' : ''
                  }`}
                >
                  <div className="flex items-center justify-between mb-1">
                    <span className="text-white font-medium">{pair.symbol}</span>
                    {data && (
                      <span className={`text-sm ${isPositive ? 'text-green-400' : 'text-red-400'}`}>
                        {isPositive ? '+' : ''}{data.changePercent.toFixed(2)}%
                      </span>
                    )}
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-gray-400 text-xs">{pair.name}</span>
                    {data && (
                      <span className="text-white text-sm font-mono">
                        {data.price.toFixed(5)}
                      </span>
                    )}
                  </div>
                </div>
              );
            })}
          </div>
        </div>

        {/* Main Chart Area */}
        <div className="flex-1 flex flex-col overflow-hidden">
          {/* Price Header */}
          <div className="bg-gray-900 border-b border-gray-800 p-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-6">
                <div>
                  <h1 className="text-2xl font-bold text-white flex items-center gap-2">
                    {FOREX_PAIRS.find(p => p.symbol === selectedPair)?.name || selectedPair}
                    {marketData && (
                      marketData.changePercent >= 0 ? (
                        <TrendingUp className="h-6 w-6 text-green-400" />
                      ) : (
                        <TrendingDown className="h-6 w-6 text-red-400" />
                      )
                    )}
                  </h1>
                  {marketData && (
                    <div className="flex items-center gap-4 mt-1">
                      <span className="text-3xl font-bold text-white">
                        {marketData.price.toFixed(5)}
                      </span>
                      <span className={`text-lg font-medium ${
                        marketData.changePercent >= 0 ? 'text-green-400' : 'text-red-400'
                      }`}>
                        {marketData.changePercent >= 0 ? '+' : ''}
                        {marketData.change.toFixed(5)} ({marketData.changePercent.toFixed(2)}%)
                      </span>
                    </div>
                  )}
                </div>
              </div>

              {marketData && (
                <div className="flex gap-6 text-sm">
                  <div>
                    <span className="text-gray-400">High:</span>
                    <span className="text-white ml-2">{marketData.high.toFixed(5)}</span>
                  </div>
                  <div>
                    <span className="text-gray-400">Low:</span>
                    <span className="text-white ml-2">{marketData.low.toFixed(5)}</span>
                  </div>
                  <div>
                    <span className="text-gray-400">Volume:</span>
                    <span className="text-white ml-2">
                      {(marketData.volume / 1000000).toFixed(2)}M
                    </span>
                  </div>
                </div>
              )}
            </div>
          </div>

          {/* Chart */}
          <div className="flex-1 overflow-auto bg-black">
            <LightweightSignalChart pair={selectedPair} />
          </div>
        </div>
      </div>

      {/* Signal Notifications Component */}
      <SignalNotifications pair={selectedPair} />
    </div>
  );
} const [marketData, setMarketData] = useState<MarketData | null>(null);
  const [watchlistData, setWatchlistData] = useState<Record<string, MarketData>>({});

  useEffect(() => {
    // Check if user has access to charts
    if (!user) {
      router.push('/login');
      return;
    }

    // Check subscription status
    if (user.subscriptionStatus !== 'active' && !user.isAdmin) {
      router.push('/subscription');
      return;
    }
  }, [user, router]);

  if (!user) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">Loading...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
      {/* Navigation */}
      <Navigation />
      
      {/* Header */}
      <div className="bg-white dark:bg-gray-800 shadow-sm border-b border-gray-200 dark:border-gray-700">
        <div className="max-w-full mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <div className="flex items-center space-x-4">
            <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
              Live Trading Chart
            </h1>
            <select
              value={selectedPair}
              onChange={(e) => setSelectedPair(e.target.value)}
              className="px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500"
            >
              <option value="EURUSD">EUR/USD</option>
              <option value="GBPUSD">GBP/USD</option>
              <option value="USDJPY">USD/JPY</option>
              <option value="AUDUSD">AUD/USD</option>
              <option value="USDCAD">USD/CAD</option>
              <option value="XAUUSD">XAU/USD (Gold)</option>
            </select>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-full mx-auto p-4">
        <LightweightSignalChart pair={selectedPair} />
      </div>

      {/* Signal Notifications Component */}
      <SignalNotifications pair={selectedPair} />
    </div>
  );
}
